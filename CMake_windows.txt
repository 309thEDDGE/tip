add_compile_definitions(__WIN64)
set(CMAKE_GENERATOR_PLATFORM x64)
set(linux_libs "")

#########################################################
#                     Yaml Lib Paths
#########################################################

set(yaml_path "${deps_dir}/yaml-cpp-yaml-cpp-0.6.0/yaml-cpp-yaml-cpp-0.6.0")
set(yaml_inc_dir "${yaml_path}/include")
if(${CMAKE_BUILD_TYPE} MATCHES "Debug")
    set(yaml_lib_dir "${yaml_path}/build/Debug")
    set(yaml_lib_name "${yaml_lib_dir}/libyaml-cppmdd.lib")
elseif(${CMAKE_BUILD_TYPE} MATCHES "Release")
    set(yaml_lib_dir "${yaml_path}/build/Release")
    set(yaml_lib_name "${yaml_lib_dir}/libyaml-cppmd.lib")
else()
    message(FATAL_ERROR "CMAKE_BUILD_TYPE not defined")

endif()

#########################################################
#                  Apache Arrow Lib Paths
#########################################################

set(arrow_path "arrow_library_dependencies")
set(arrow_inc_dir "${deps_dir}/${arrow_path}/include")
set(arrow_lib_dir "${deps_dir}/${arrow_path}/lib")
 
set(arrow_lib_name "${arrow_lib_dir}/arrow_static.lib")
set(zlib_lib_name  "${arrow_lib_dir}/zlibstatic.lib")
set(lz4_lib_name  "${arrow_lib_dir}/liblz4_static.lib")
set(zstd_lib_name  "${arrow_lib_dir}/zstd_static.lib")
set(snappy_lib_name  "${arrow_lib_dir}/snappy.lib")
set(thrift_lib_name  "${arrow_lib_dir}/thriftmd.lib")
set(brotli_lib_name  "${arrow_lib_dir}/brotlicommon-static.lib")
set(brotlienc_lib_name  "${arrow_lib_dir}/brotlienc-static.lib")
set(brotlidec_lib_name  "${arrow_lib_dir}/brotlidec-static.lib")
set(doubleconv_lib_name "${arrow_lib_dir}/double-conversion.lib")
set(parquet_lib_name  "${arrow_lib_dir}/parquet_static.lib")

#########################################################
#                Required Boost Lib Paths
#########################################################
#set(boost_inc_dir "${deps_dir}/${arrow_path}/boost_1_67_0/include")
set(boost_lib_dir "${arrow_lib_dir}")

set(boostfs_lib_name "${boost_lib_dir}/libboost_filesystem-vc140-mt-x64-1_67.lib")
set(boostsys_lib_name "${boost_lib_dir}/libboost_system-vc140-mt-x64-1_67.lib")
set(boostregex_lib_name "${boost_lib_dir}/libboost_regex-vc140-mt-x64-1_67.lib")


#########################################################
#               Parquet-relevant dir/libs
#########################################################
#set(parquet_inc_dirs ${arrow_inc_dir} ${boost_inc_dir})
set(parquet_inc_dirs ${arrow_inc_dir})
set(parquet_libs 
                    ${zlib_lib_name}
                    ${boostfs_lib_name} 
                    ${boostsys_lib_name} 
                    ${boostregex_lib_name}
                    ${lz4_lib_name} 
                    ${zstd_lib_name} 
                    ${snappy_lib_name} 
                    ${thrift_lib_name}
                    ${brotli_lib_name} 
                    ${brotlienc_lib_name} 
                    ${brotlidec_lib_name} 
                    ${doubleconv_lib_name}
                    ${arrow_lib_name}
                    ${parquet_lib_name} 
)

#########################################################
#             Googletest/Googlemock Lib Paths
#########################################################
set(gsuite_dir_name "googletest-release-1.8.1libs")
set(gsuite_path "${deps_dir}/${gsuite_dir_name}")
set(gtest_inc_dir "${gsuite_path}/googletest/include")
set(gtest_lib_dir "${gsuite_path}/googletest/lib")
set(gmock_inc_dir "${gsuite_path}/googlemock/include")
set(gmock_lib_dir "${gsuite_path}/googlemock/lib")

set(gtest_lib_name "${gtest_lib_dir}/gtest.lib")
set(gmain_lib_name "${gtest_lib_dir}/gtest_main.lib")
set(gmock_lib_name "${gmock_lib_dir}/gmock.lib")
set(gmock_main_lib_name "${gmock_lib_dir}/gmock_main.lib")

set(gsuite_inc_dirs ${gtest_inc_dir} ${gmock_inc_dir})
set(gsuite_libs ${gtest_lib_name} ${gmain_lib_name} ${gmock_lib_name} ${gmock_main_lib_name})

#########################################################
#                   LibIrig106 Paths
#########################################################
set(irig_dir_name "libirig106")
set(irig_path "${deps_dir}/${irig_dir_name}")
#message(STATUS "IRIG path: ${irig_path}")
set(irig_inc_dir ${irig_path}/include)
set(irig_lib_dir ${irig_path}/lib)
set(irig_lib_name ${irig_lib_dir}/irig106.lib)

#########################################################
#                   libtins Paths
#########################################################
set(tins_dir_name "libtins")
set(tins_path "${deps_dir}/${tins_dir_name}")
set(tins_inc_dir ${tins_path}/include)
set(tins_lib_dir ${tins_path}/lib)
set(tins_lib_name ${tins_lib_dir}/tins.lib)

# pcap necessary to link for libtins
set(pcap_dir_name "npcap")
set(pcap_path "${deps_dir}/${pcap_dir_name}")
set(pcap_inc_dir ${pcap_path}/include)
set(pcap_lib_dir ${pcap_path}/lib/x64)
set(pcap_lib_name ${pcap_lib_dir}/wpcap.lib ${pcap_lib_dir}/Packet.lib)

# check if output bin directory exists
# if not create it
if(NOT EXISTS ${out_bin_dir})
    file(MAKE_DIRECTORY ${out_bin_dir})
endif()
    
if(ethernet_data)
    # Pcap dlls that must be installed next to tip_parse.exe.
    set(pcap_dll1 ${pcap_lib_dir}/wpcap.dll)
    set(pcap_dll2 ${pcap_lib_dir}/Packet.dll)

    # Copy pcap dlls to bin dir.
    configure_file(${pcap_dll1} ${out_bin_dir} COPYONLY)
    configure_file(${pcap_dll2} ${out_bin_dir} COPYONLY)

    # Copy dlls to build/cpp dir.
    if(NOT EXISTS ${build_dir})
        file(MAKE_DIRECTORY ${build_dir})
    endif()
    configure_file(${pcap_dll1} ${build_dir} COPYONLY)
    configure_file(${pcap_dll2} ${build_dir} COPYONLY)
endif()

# Other system libs necessary, ought to be found by compiler
set(other_tins_lib_names Ws2_32.lib Iphlpapi.lib)

set(all_tins_incs ${tins_inc_dir} ${pcap_inc_dir})
set(all_tins_libs ${tins_lib_name} ${other_tins_lib_names} ${pcap_lib_name})

#########################################################
#                   spdlog
#########################################################
set(spdlog_dir_name "spdlog-1.8.2")
set(spdlog_path "${deps_dir}/${spdlog_dir_name}")
set(spdlog_inc_dir ${spdlog_path}/include)
set(spdlog_lib_dir ${spdlog_path}/lib)
set(spdlog_lib_name ${spdlog_lib_dir}/spdlog.lib)

