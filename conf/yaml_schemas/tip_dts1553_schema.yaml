# Legend:
# - (O)  = optional map with specific key
# - (R)  = required map with specific key
# - (WR) = wildcard placeholder for required user-defined input
# - (WO) = wildcard placeholder for optional user-defined input

# Wildcards represent user-defined strings and are used to 
# give names to 1553 messages or elements. Within a structure,
# a wildcard may be repeated many times to define all necessary 
# message and/or message elements.

# The inclusion requirement applies at each level of the structure 
# to the current level and down to lower-level structures. For example,
# the optional wildcard which is value mapped to the word_elem key
# may not be relevant for the current message, in which case 
# the word_elem key is mapped to a null value. It may also 
# be the case that the word_elem key maps to multiple 1553 
# word elements, in which case word_elem maps to another
# map with multiple key:value pairs, each of which is mapped
# to another a map which contains the keys off, cnt, schema, etc.

# See additional definitions below and the example DTS1553 yaml file at
# 

---
translatable_message_definitions:           # (R)
  _NOT_DEFINED_:                            # (WR), alias: msg_name = 1553 message name
    msg_data:                               # (R) 
      command: [INT]                        # (R)
      lru_addr: [INT]                       # (R)
      lru_subaddr: [INT]                    # (R)
      lru_name: [STR]                       # (R)
      bus: STR                              # (R)
      wrdcnt: INT                           # (R)
      rate: FLT                             # (R)
      mode_code: BOOL                       # (R)
      desc: STR                             # (R)
    word_elem:                              # (R)
      _NOT_DEFINED_OPT_:                    # (WO), alias: wrd_elem_name = word/multiple word element
        off: INT                            # (R)
        cnt: INT                            # (R)
        schema: STR                         # (R)
        msbval: FLT                         # (R)
        desc: STR                           # (R)
        uom: STR                            # (R)
        multifmt: BOOL                      # (R)
        class: INT                          # (R)
    bit_elem:                               # (R)
      _NOT_DEFINED_OPT_:                    # (WO), alias: bit_elem_name = bit/multiple bit element
        off: INT                            # (R)
        cnt: INT                            # (R)
        schema: STR                         # (R)
        msbval: FLT                         # (R)
        desc: STR                           # (R)
        uom: STR                            # (R)
        multifmt: BOOL                      # (R)
        class: INT                          # (R)
        msb: INT                            # (R)
        lsb: INT                            # (R)
        bitcnt: INT                         # (R)
supplemental_bus_map_command_words:         # (O) 
  _NOT_DEFINED_:                            # (WR), alias: bus_name = name of a bus from which 1553 data were recorded
    - [INT]                                 # (R)
...	

#### Parameter Definitions ####

###############################
#            Notes            #
#
# Command word breakdown:
#
# 1...RT address (bits 1-5)
# 2...
# 3...
# 4...
# 5...
# 6...Transmit/Recieve (1 transmit, 0 recieve)
# 7...Subaddress (bits 7-11)
# 8...
# 9...
# 10..
# 11..
# 12..Word Count/Mode Code (bits 12-16)
# 13..
# 14..
# 15..
# 16..
#
# Boolean values shall be denoted by strings. True shall
# be indicated by True or true and false shall be indicated
# by False or false. 
#
##############################
#       end notes            #
##############################

#
# translatable_message_definitions
# 
# Required, structure included exactly once in 1553
# data translation specification (DTS1553)
# 
# Required top level key which indicates that all 
# structure below it defines 1553 messages to be 
# translated.
#

# 
# _NOT_DEFINED_ 
# alias: msg_name
#
# Required, structure included at least once in the 
# translatable_message_definitions structure
#
# Required wildcard to be replaced by the user with a 1553
# message name. The data structure to which this key maps is 
# relevant to this message alone. The lower map with keys msg_data,
# word_elem and bit_elem are immediately below the 
# message name and are required. There may be as few as a single
# msg_name data structure or hundreds, depending on the content
# of the ch10.
#

# 
# msg_data
#
# Required, structure included at least once in msg_name structure
#
# Contains data relevant to identifying a 1553 message. This key 
# maps to a lower map with the keys: command, lru_addr, lru_subaddr,
# lru_name, bus, wrdcnt, rate, mode_code, and desc.
# 

#
# command
# 
# Required, structure included exactly once in the current map
#
# Key maps to a sequence of two integers, the 1553 transmit command
# word followed the receive command word. If the 1553 message is a 
# transmit type message, then the receive command word position 
# filled with a zero. If receive message, the transmit position
# shall contain a zero. An RT-to-RT type message shall include 
# both non-zero values.
#

# 
# lru_addr
# 
# Required, structure included exactly once in the current map
#
# Key maps to a sequence of two integers, the transmitting lru 
# address and the receiving lru address. These are the addresses 
# that can be determined from the a break down of the command 
# words. The bus controller always takes the address zero in 
# the pair of command words. In example, a RT to BC message
# has an lru pair consisting of the RT lru address followed by
# zero. A BC to RT message has those values swapped, and an 
# RT to RT message has two non-zero lru addresses. 
# 

# 
# lru_subaddr 
#
# Required, structure included exactly once in the current map
# 
# Key maps to a sequence of two integers, the transmitting 
# lru subaddress followed by the receiving lru subaddress. This 
# mapping follows the convention that the BC utilizes the 
# lru subaddress of zero like other pairs. The subaddresses may 
# also be obtained from the command words. 
#

#
# lru_name
# 
# Required, structure included exactly once in the current map
# 
# Key maps to a sequence of two strings, the transmitting
# lru name or label followed by the receiving lru name or label.
# 

# 
# bus
# 
# Required, structure included exactly once in the current map
#
# Key maps to a string which is the name of the bus on which the 
# relevant message occurs. This string ought to match the name 
# of the bus that is given in TMATS data, or at least be a substring
# of a possible bus name found in TMATS. 
#

# 
# wrdcnt
# 
# Required, structure included exactly once in the current map
#
# Key maps to an integer which is the count of data words transmitted
# in the current message. It does not include command or status words
# transmitted as part of the complete 1553 message transmission. This 
# value can also be determined from the command word(s). 
# 

#
# rate
# 
# Required, structure included exactly once in the current map
#
# Key maps to a float value which gives the message transmission
# rate with Hz unit.
#

#
# mode_code 
#
# Required, structure included exactly once in the current map
# 
# Key maps to a boolean value. True indicates that the message 
# is a mode code type 1553 message and false indicates that the
# message is not a mode code. This boolean can be determined from
# command word by a combination of the subaddress field and 
# word count/mode code field. 
#

# 
# desc 
# 
# Required, structure included exactly once in the current map
# 
# Key maps to a string description of the 1553 message.
#

#
# word_elem
# 
# Required, structure included exactly once in the current map
#
# Key is one of three keys at the current level of the data structure.
# The other two keys in the map are msg_data (see above) and 
# bit_elem (see below). The key maps to a map which has keys that 
# are the names of the 1553 message elements which are comprised of 
# an integer number of uint16 payload words. Examples include 
# uint16, int16, uint32, int32, uint64, int64, etc. There is another
# data structure to identify and intepret bit-level elements, those
# elements which are comprised of a single bit or multiple bits which
# do not compose an integer number of 1553 payload words.
#

# 
# _NOT_DEFINED_OPT_ 
# alias: wrd_elem_name
# 
# Optional, structure may be included if the 1553 message contains
# payload data which ought to be interpreted as an integer number
# of uint16 words.
#
# Optional wildcard key to be replaced by the user-defined name of the 
# element to be translated from the raw 1553 payload. There may 
# be 0 or many of these data structures, where each structure
# defines exactly one element to be interpreted or translated 
# out of the payload for the given message.
#

# 
# off (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Key maps to an integer which is the offset within the 1553 
# message data payload of the word(s) to be used to translate
# the current element. This value is zero-indexed such that 
# first word in a 1553 message payload has offset zero.
#

# 
# cnt (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Key maps to an integer which is the count of uint16 1553 message
# payload words to be used to interpret the value of the element.
#

# 
# schema (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Key maps to a string which identifies a specific algorithm 
# for intepreting the word(s) defined as part of the current 
# element. The optional values are:
# 
#   // IEEE standard twos-complement signed 16-bit integer.
#   SIGNED16
#
#	// IEEE standard two-complement signed 32-bit integer.
#	SIGNED32
#
#	// IEEE standard unsigned 16-bit integer.
#	UNSIGNED16
#
#	// IEEE standard unsigned 32-bit integer.
#	UNSIGNED32
#
#	// MilStd1750 32-bit floating point value.
#	FLOAT32_1750
#
#	// IEEE 32-bit floating point value.
#	FLOAT32_IEEE
#
#	// IEEE 64-bit floating point value.
#	FLOAT64_IEEE
#
#	// 16-bit floating point value -- standard currently uknown.
#	FLOAT16
#
#	// Two or more consecutive bits to be interpreted as a twos-complement signed integer.
#	// SIGNEDBITS or UNSIGNEDBITS schema should be used when is_bitlevel_ = true.
#	SIGNEDBITS
#
#	// Single-bit boolean or multiple bits to be interpreted as unsigned integer.
#	// SIGNEDBITS or UNSIGNEDBITS schema should be used when is_bitlevel_ = true.
#	UNSIGNEDBITS
#
#	// Collins Adaptive Processing System (CAPS) 48-bit floating point value.
#	CAPS
#
#	// 32-bit floating point value -- standard currently unknown.
#	FLOAT32_GPS
#
#	// 64-bit floating point value -- standard currently unknown.
#	FLOAT64_GPS
#

#
# msbval (relative to wrd_elem_name data structure)
#
# Required, structure included exactly once in the current map
#
# Key maps to a floating point value giving the (potentially scaled)
# value of the most significant bit (MSB) in the value to be interpreted
# by the word(s). An example is an interpreted value which provides 
# a high-precision datum with a value between 0 and 1, indicates a 
# single data payload (wrdcnt = 1) and uint16 schema (schema = UNSIGNED16)
# and an msbval of 0.5. An msbval of 0.5 implies a scale factor 
# of 0.5 / 2^15 = 1.52588e-5. If this word were to have all 16 bits high
# then the intended value is (2^16 - 1) * 1.5288e-5 ~= 1.0. The most 
# significant bit of signed values is the one bit lower than the highest
# bit which is designated as the sign bit. Currently, floating point
# values do not use the msbval and a value of 1 ought to be used as 
# placeholder.
#

#
# desc (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Key maps to a string value describing the value to be interpreted
# or extracted from the raw payload. Ex: "height above ground".
#

# 
# uom (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Key maps to a string value indicating the unit of the translated
# element. This string is not currently used at translation time. 
# If unknown or not relevant, a placeholder ought to be used. 
#

# 
# multifmt (relative to wrd_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Key maps to a boolean value indicating that the element is a 
# multi-format type element. This only applies to certain platforms
# and the default value ought to be false.
#

#
# class (relative to wrd_elem_name data structure)
#
# Required, structure included exactly once in the current map
#
# Key maps to an integer which indicates the security classification of 
# the element. This value is not currently utilized. The default value 
# ought to be zero. 
#

# 
# _NOT_DEFINED_OPT_
# alias: bit_elem_name
# 
# Optional, structure may be included if the 1553 message contains
# payload data which ought to be interpreted from a collection of 
# contiguous bits.
#
# Optional wildcard key to be replaced by the user-defined name of the 
# element to be translated from the raw 1553 payload. There may 
# be 0 or many of these data structures, where each structure
# defines exactly one element to be interpreted or translated 
# out of the payload for the given message.
#

#
# off (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Same meaning as defined in the wrd_elem_name data structure.
#

# 
# cnt (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Same meaning as defined in the wrd_elem_name data structure.
#

# 
# schema (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Same meaning as defined in the wrd_elem_name data structure.
#

#
# msbval (relative to bit_elem_name data structure)
#
# Required, structure included exactly once in the current map
#
# Same meaning as defined in the wrd_elem_name data structure.
#

#
# desc (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
# 
# Same meaning as defined in the wrd_elem_name data structure.
#

# 
# uom (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Same meaning as defined in the wrd_elem_name data structure.
#

# 
# multifmt (relative to bit_elem_name data structure)
# 
# Required, structure included exactly once in the current map
#
# Same meaning as defined in the wrd_elem_name data structure.
#

#
# class (relative to bit_elem_name data structure)
#
# Required, structure included exactly once in the current map
#
# Same meaning as defined in the wrd_elem_name data structure.
#

#
# msb
#
# Required, structure included exactly once in the current map
#
# Key maps to an integer which identifies the most significant bit
# within the first word (often the only word) from which bits
# shall be extracted to form the intended value. Bits within 
# each 16-bit word are 1-indexed beginning at the MSB of the 
# word. In example, bit 1 is the MSB and bit 16 is the LSB in 
# the 16-bit word. 
#

#
# lsb
#
# Required, structure included exactly once in the current map
#
# Key maps to an integer which identifies the least significant bit 
# within the final word (often the first and only word) from which
# bits shall be extracted to from the intended value, following a 
# 1-indexed convention with bit 1 the MSB and bit 16 the LSB
# within the 16-bit word. In example, a four bit sequence which represents,
# via the raw bits, a value in the range 0--15, may be specified by
# bits msb=4 and lsb=7. Bit 4, fourth most signficant, through bit 
# 7, 7th most significant, comprise four bits which shall be extracted
# by the translator and scaled according to the msbval.
#

#
# bitcnt
#
# Required, structure included exactly once in the current map
#
# Key maps to a integer which gives the explicit count of bits  
# to be extracted from the the word(s) at offset 'off'. This 
# value is redudant and ought to be equal to lsb - msb + 1. 
#

#
# supplemental_bus_map_command_words
#
# Optional, structure included once if desired
#
# Key maps to another map, to be described below. This 
# optional data structure can assist in automatic bus-mapping 
# which occurs during translation. Lists of transmit/recieve 
# command words may be provided for the user. These command
# words are particularly useful when multiple platform subsystems
# are not turned on during recording of the ch10 and only a small 
# subset of the possible messages are transmitted during the recording.
#

# 
# _NOT_DEFINED_
# alias: bus_name
#
# Required, if the supplemental_bus_map_command_words structure is 
# utilized then at least one bus_name must be given.
#
# User-defined key, which is the name of a bus given in 'bus' name
# map of the 'msg_data' mapping. There may be multiple such mappings,
# the set of which represent a unique set of bus names, where each bus
# here that matches a bus given in the 'bus' map above must represent
# same actual bus. In other words, use consistent bus names between
# this data structure and the bus names used in 'translatable_message_definitions'.
#
# Each user-defined bus name shall map to a sequence. Each entry in the
# sequence shall be a sequence of two integers, the transmit command 
# word followed by the receive command word of message that may
# be transmitted on the bus. The message is not required to be present
# in the data. A user may provide all transmit/receive command
# word combinations that are possible on the bus. 
# 
# In general, the majority of command words relevant to a given bus
# are determined from the 'translatable_message_definitions', but
# some command words, such as non-data mode code type 1553 messages,
# are not included because of the lack of data. It can be very helpful
# to bus mapping to include those command words in this section.
#
# Additionally, there may be a bus which describes classified data. We do not
# include the message and elements description in the unclass data translation
# specification. If the command words are not classified, those values can
# be included here to assist in bus mappping. 
#