#
# parse_conf.yaml Configuration file for ch10parse.exe
#
# Place the config file one directory up from executable in a conf directory
# <executable location>..\conf\translate_conf.yaml
#

#
# ch10_packet_type
#
# Enable ch10 packets by setting the mapped value to 'true'.
# Set to 'false' to disable.
#
ch10_packet_type:
  MILSTD1553_FORMAT1: true
  VIDEO_FORMAT0: true
  ETHERNET_DATA0: true
  ARINC429_FORMAT0: true

#
# parse_chunk_bytes
#
# Quantity of bytes, in units of millions, ingested for parsing by each worker thread. Must be
# in range [135, 1000].
#
parse_chunk_bytes: 200

#
# parse_thread_count
#
# Quantity of simultaneous threads. As a general rule of thumb, use 3/4 of your logical processors.
# Valid ranges are [1, Cores * 1.5].
# Consider that at least parse_thread_count * parse_chunk_bytes of memory will be consumed.
#
parse_thread_count: 2

#
# max_chunk_read_count
#
# Maximum quantity of worker threads that will be started to ingest and parse the ch10 file.
# Total parse size = parse_chunk_bytes * max_chunk_read_count. If total parse size is less than
# ch10 file size, the ch10 file will not be fully parsed.
#
max_chunk_read_count: 1000

#
# worker_offset_wait_ms
#
# Duration in millisecond to wait after each worker starts, only for the initial set of parse_thread_count
# workers. Staggered start time distributes IO load. Normally in range [500, 10000].
#
worker_offset_wait_ms: 200

#
# worker_shift_wait_ms
#
# Duration in millisecond to wait before checking workers' states. Normally in range [20, 500].
#
worker_shift_wait_ms: 200

#
# stdout_log_level
#
# Set log level of stdout sink to minimum log level. All log entries
# with level value greater or equal to minimum level value will
# be printed to stdout. 
#
# Log level and value:
# - trace     = 0
# - debug     = 1
# - info      = 2
# - warn      = 3
# - error     = 4
# - critical  = 5
# - off       = 6
#
# Accept values in the set {trace, debug, info, warn, error, critical, off}.
#
# Example:
# 
# "stdout_log_level: info"
#
# All log entries with level info, warn, error or critical will be 
# printed to stdout.
#
stdout_log_level: info
