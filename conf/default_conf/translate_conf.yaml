#
# translate_conf.yaml Configuration file for translate_1553_from_parquet
#
# Place the config file one directory up from the executable in a conf directory
# <executable location>..\conf\translate_conf.yaml
#


#
# translate_thread_count
#
# Number of threads to use for translation
# valid ranges = [1, Cores * 2] 
#
translate_thread_count: 1


#
# use_tmats_busmap
#
# Use tmats for mapping chapter 10 channel ids to bus names instead of the
# voting method explained in vote_threshold comments. 
# TMATS bus names must be exact matches with DTS bus names for successful
# bus mapping.
#
use_tmats_busmap: false


#
# tmats_busname_corrections
#
# Corrects TMATS busname strings to the desired bus name in the provided dictionary
# first entry ->  original TMATS bus name
# second entry->  bus name TMATS should be corrected to
# second entries should match comet specifications
# List the corrections in a dictionary with each entry specified as "<first entry>: <second entry>"
# Provide empty dictionary when no TMATS corrections are needed.
# 
# --examples-- 
# tmats_busname_corrections:
#   {
#     1553_1: ABUS,
#     1553_2: BBUS
#   }
# 
# (no corrections)
# tmats_busname_corrections: 
#   {}
#
tmats_busname_corrections: 
  {}

#
# prompt_user
#
# True  ->  prompt the user for help with bus mapping
# False ->  don't prompt the user for help with bus mapping
#
prompt_user: false

#
# stop_after_bus_map
#
# Exit after auto-mapping. Can be used to debug
# mapping code, which prints mapping information to stdout. 'true' or 'false'.
#
stop_after_bus_map: false

#
# vote_threshold 
#
# The vote_threshold is only used when use_tmats_busmap = false
# Bus mapping is used to associate a 1553 channel ID recorded in 
# the chapter 10 to a bus name found in the 1553 DTS file.
# One method is to use tmats, if it is correct, by setting 
# use_tmats_busmap: True, or by using a voting method by setting
# use_tmats_busmap: False.
#
# The bus map vote method uses the transmit/recieve command words
# off the 1553 bus and matches them to a transmit/recieve command
# word in the 1553 DTS file. If a transmit/recieve command word
# from a given channel ID matches a transmit/recieve command word
# from the 1553 DTS file, the channel ID votes for the bus/buses associated
# with the transmit/recieve command word from the 1553 DTS file. 
# (Note: word count is ignored from transmit/recieve command word matching)
# IF there are a lot of different 1553 buses recorded in the chapter 10 
# and not enough command words provided through the 1553 DTS file AND
# not a lot of traffic exists on one of the buses, there is a chance
# that the channel ID with lower traffic could be mapped to the wrong bus.
# vote_threshold can be used to help prevent this issue. To create a final 
# channel ID -> bus name mapping, the bus votes from a given channel ID
# must be >= vote_threshold. vote_threshold is also helpful if DTS bus names
# are not substrings or equivalent to TMATS bus names and vote_method_checks_tmats = false.
#
# A good threshold can be found from trial and error. It greatly depends
# on how complete the 1553 DTS file is and the amount of bus traffic
# on each bus. 
# Valid ranges are [1, INT_MAX].
#
vote_threshold: 5

#
# vote_method_checks_tmats 
#
# vote_method_checks_tmats is only used when use_tmats_busmap = false
# Once the voting process is carried out, the results will be compared 
# with TMATS. If a bus name associated with a given channel ID is a substring 
# of the TMATS bus name for that given channel ID, it will allow the channel 
# ID to be mapped. If a TMATS match is not made, it will not map the channel 
# ID that doesn't have a TMATS bus name match
#
#
# Example 1:
# voting method results--
# channel ID = 1,  bus name = "BUS1"
# --
# tmats--
# channel ID = 1, bus name = "BUS1" or "BUS1MUX" or "*ANYTHING*BUS1*ANYTHING*"
# -- 
# final bus map (channel ID = 1 -> "BUS1")
#
# Example 2:
# voting method results--
# channel ID = 1,  bus name = "BUS1"
# --
# tmats results--
# channel ID = 1, bus name = "BUS2" or missing from TMATS
# -- 
# final bus map (channel ID 1 will be left unmapped)
#
vote_method_checks_tmats: false

# 
# bus_name_exclusions
#
# If a bus name exists in the final bus map that also
# exists in the bus_name_exclusions list. It will be removed 
# from the final bus map. Removals include the case when 
# a bus from the bus_name_exclusions list is a substring of the full bus name
# found in either the DTS file or TMATS. 
# Example: TMATs/DTS = "BUSAMUX",  
# bus_name_exclusion = "BUSA", will result in removal
# of BUSAMUX from the final bus map 
#
# Removals are also not case sensitive 
# Example: TMATs/DTS -> "BusA",  
# bus_name_exclusion -> "BUSA", will result in removal
# of BusA from the final bus map 
# 
bus_name_exclusions: 
  []

#
# select_specific_messages
#
# If non empty list provided, only the list of messages given will be translated.
# All other messages will be ignored. Provide empty list to translate all messages.
# Only available when XDAT preprocessor definition is defined.
# 
# --examples-- 
# select_specific_messages:
#   [
#     messageName1, 
#     messageName2
#   ]
#
# (translate all messages)
# select_specific_messages:
#   []
#
select_specific_messages: 
  []


# 
# exit_after_table_creation
#
# True or false. Halt translation routine and exit after table
# creation. Useful for debugging message table creation.
#
exit_after_table_creation: false
 



